#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Std;
use vars qw($opt_w $opt_t $opt_s $opt_a);
use lib ".";
use FAlite;

#######
# CLI #
#######

getopts("w:t:sa");
my $W = 11;
my $T = 1.5;

my $usage = "
usage: $0 <fasta file>
options:
  -w <int>   window size [$W]
  -t <float> entropy threshold [$T]
  -s         soft masking (lowercase instead of N)
note: use - for stdin
";
die $usage unless @ARGV == 1;
$W = $opt_w if $opt_w;
$T = $opt_t if $opt_t;
my $SOFT = $opt_s ? 1 : 0;
my $ALT = $opt_a; # use alternative simple algorithm, not an advertised option
my ($file) = @ARGV;

#########
# Input #
#########

my $fh;
if    ($file eq "-")     {$fh = *STDIN}
elsif ($file =~ /\.gz$/) {open($fh, "gunzip -c $file |")}
else                     {open($fh, $file)}

#############
# Main Loop #
#############

my $fasta = new FAlite($fh);
while (my $entry = $fasta->nextEntry) {
	if (length($entry->seq) < $W) {
		print($entry);
		next;
	}
	my $seq = $ALT
		? dust1(uc $entry->seq, $W, $T, $SOFT)
		: dust2(uc $entry->seq, $W, $T, $SOFT);
	print $entry->def, "\n";
	for (my $i = 0; $i < length($seq); $i += 80) {
		print substr($seq, $i, 80), "\n";
	}
}

########
# subs #
########

sub seq_entropy {
	my ($seq) = @_;

	my $A = $seq =~ tr/A/A/;
	my $C = $seq =~ tr/C/C/;
	my $G = $seq =~ tr/G/G/;
	my $T = $seq =~ tr/T/T/;

	my @p;
	push @p, $A/length($seq) if $A;
	push @p, $C/length($seq) if $C;
	push @p, $G/length($seq) if $G;
	push @p, $T/length($seq) if $T;

	my $h = 0;
	for (@p) {
		$h += $_ * log($_)
	}

	return -$h / log(2);
}

sub dust1 {
	my ($seq, $w, $t, $lc) = @_;

	my $mask = $seq;
	my $w2 = int($w/2);
	for (my $i = 0; $i < length($seq) -$w +1; $i++) {
		my $window = substr($seq, $i, $w);
		my $h = seq_entropy($window);
		if ($h < $t) {
			if ($lc) {
				substr($mask, $i + $w2, 1) = lc(substr($seq, $i + $w2, 1));
			} else {
				substr($mask, $i + $w2, 1) = 'N';
			}
		}
	}

	return $mask;
}

sub hash_entropy {
	my ($count, $w) = @_;
	my $pa = $count->{A} / $w;
	my $pc = $count->{C} / $w;
	my $pg = $count->{G} / $w;
	my $pt = $count->{T} / $w;
	my $h = 0;
	$h += $pa * log($pa) if $count->{A};
	$h += $pc * log($pc) if $count->{C};
	$h += $pg * log($pg) if $count->{G};
	$h += $pt * log($pt) if $count->{T};
	return -$h / log(2);
}

sub dust2 {
	my ($seq, $w, $t, $lc) = @_;

	my $mask = $seq;
	my $w2 = int($w/2);

	# first window
	my %count = (
		'A' => substr($seq, 0, $w) =~ tr/A/A/,
		'C' => substr($seq, 0, $w) =~ tr/C/C/,
		'G' => substr($seq, 0, $w) =~ tr/G/G/,
		'T' => substr($seq, 0, $w) =~ tr/T/T/,
	);

	if (hash_entropy(\%count, $w) < $t) {
		if ($lc) {
			substr($mask, $w2, 1) = lc(substr($seq, $w2, 1));
		} else {
			substr($mask, $w2, 1) = 'N';
		}
	}

	# all other windows
	for (my $i = 1; $i < length($seq) -$w + 1; $i++) {
		my $off = substr($seq, $i-1, 1);
		my $on = substr($seq, $i+$w-1, 1);
		$count{$off}--;
		$count{$on}++;
		if (hash_entropy(\%count, $w) < $t) {
			if ($lc) {
				substr($mask, $i + $w2, 1) = lc(substr($seq, $i + $w2, 1));
			} else {
				substr($mask, $i + $w2, 1) = 'N';
			}
		}
	}

	return $mask;
}
