import gzip
import itertools
import argparse
import json
import math
import sys
parser = argparse.ArgumentParser(
  description='HMM with viterbi algo for detecting r-loops')

parser.add_argument('-p', type=str, metavar='<fasta_file>', help='fasta file input for training data on the positive strand')
parser.add_argument('-n', type=str, metavar='<fasta_file>', help='fasta file input for training data on the negative strand')
parser.add_argument('-nth', type=int, metavar='<int>', default=1, help='HMM nth order for emission probabilities (default: %(default)i)')

arg = parser.parse_args()


def read_seqs(file_name):
  label = None
  seq = []

  fp = None
  if    file_name == '-':         fp = sys.stdin
  elif file_name.endswith('.gz'): fp = gzip.open(file_name, 'rt')
  else:                          fp = open(file_name)

  while True:
    line = fp.readline()
    if line == '': break
    line = line.rstrip()
    if line.startswith('>'):
      if len(seq) > 0:
        seq = ''.join(seq)
        yield(label, seq)
        label = line[1:]
        seq = []
      else:
        label = line[1:]
    else: seq.append(line)
  yield(label, ''.join(seq))
  fp.close()


def model_make(num_order):
  model_ret = {}

  if num_order == 0:
    for base in itertools.product(list('ACGT'), repeat = 1):
      base = ''.join(base)
      model_ret[base] = 0
  else:
    for kmer in itertools.product(list('ACTG', repeat=num_order)):
      kmer = ''.join(kmer)
      model_ret[kmer] = {}
      for base in list('ACGT'):
        model_ret[kmer][base] = 0
  
  return model_ret


def prob_score(prob):
  if prob == 0:
    return -50
  else:
    return math.log2(prob)


def train_model(file_name, order):
  cur_model = model_make(order)

  for _, seq in read_seqs(file_name):
    if order == 0:
      for base in seq: 
        cur_model[base] += 1
    else:
      for i in range(len(seq)-order-1):
        cur_subseq = seq[i:i+order]
        cur_base = seq[i+order]
        cur_model[cur_subseq][cur_base] += 1
  if order == 0:
    total_sum = sum(cur_model.values())
    for base in cur_model:
      cur_model[base] = prob_score(cur_model[base] / total_sum)
  else:
    for sub_seq in cur_model:
      total_sum = sum(cur_model[sub_seq].values())
      for base in cur_model.keys():
        prob = cur_model[sub_seq][base] / total_sum
        cur_model[sub_seq][base] = prob_score(prob)
  return cur_model

def transition_prob():
  transition_matrix = [[0 for i in range(3)]for j in range(3)]

  transition_matrix[0][0], transition_matrix[0][1], transition_matrix[0][2] =  prob_score(0.99999), prob_score(5e-6), prob_score(5e-6)

  transition_matrix[1][0], transition_matrix[1][1], transition_matrix[1][2] =  prob_score(299/300), prob_score(1/300), prob_score(0)

  transition_matrix[2][0], transition_matrix[2][1], transition_matrix[2][2] =  prob_score(299/300), prob_score(0), prob_score(1/300)

  return transition_matrix

out_file = {}
out_file['name'] = "output train"
out_file['author'] = "Sreeram"
out_file['states'] = ['p', 'n', 'gnm']
out_file['init'] = {}
out_file['transitions'] = {}
out_file['emissions'] = {}

order = arg.nth

out_file['emissions']['positive'] = train_model(arg.p, order)
out_file['emissions']['negative'] = train_model(arg.n, order)
out_file['emissions']['gnm'] = model_make(order)

inits = [0.33, 0.33, 0.33]

states = 3
out_file['terms'] = {}

for i, state in enumerate(out_file['states']):
  out_file['init'][state] = prob_score(inits[i])
  out_file['terms'][state] = prob_score(inits[i])
  out_file['transitions'][state] = {}



